This is a shortened example.  To make it a more substantial project (1000+ lines), you should:

* **Add more problems:** Include problems like finding the only non-repeating element, checking if a number is a power of 2,  etc.
* **Implement multiple approaches:** For each problem, add brute-force or less efficient solutions along with the optimized ones.  This showcases your understanding of trade-offs.
* **Comprehensive testing:** Add many more test cases to cover edge cases (e.g., negative numbers, large numbers, boundary conditions).
* **Benchmarking:**  Add code to time the execution of different algorithms to demonstrate performance differences.
* **Documentation:** Create a separate document explaining the algorithms, including diagrams (you can use Markdown for simple diagrams), edge cases, and interview tips.  Consider adding complexity analysis (Big O notation) for each approach.
* **Helper Utilities:** Create a separate class (`Utils.java`) for any reusable functions (e.g., bit-related helper functions).


Remember to include proper error handling and input validation in your production code.  This expanded project will significantly increase the line count and demonstrate a deeper understanding of bit manipulation. Remember to use a build system (like Maven or Gradle) to manage dependencies and build your project efficiently.